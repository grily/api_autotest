author: guozhiguo
# 需要注意：yml文件的名称要与case所在的py文件的文件名称保持一致。
procotol: &procotol https
useragent: &agent Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36
# 用于class的title
feature: 登录功能模块的相关验证
# 功能模块标识
v5login_moduleflag: &v5login_moduleflag v5login
v6console_moduleflag: &v6console_moduleflag v6console
# v5功能模块的域名
# 测试环境域名
v5login_testhost: &v5login_test storage.noteach.com.cn
# 灰度环境域名
v5login_relhost: &v5login_rel storage-backend-dev.nobook.com
# 生产环境域名
v5login_prodhost: &v5login_prod storage-backend.nobook.com
# v6功能模块的域名
# 测试环境域名
v6console_testhost: &v6console_test console-v6.noteach.com.cn
# 灰度环境域名
v6console_relhost: &v6console_rel console-v6.nobook.com
# 生产环境域名
v6console_prodhost: &v6console_prod console-v6.nobook.com

login:
  run:
  story: 登录
#  所属的功能模块组，不同的模块组对应的域名不一样
#  module_flag的值会作为对应的host域名值所对应的key的前缀
#  如当前的module_flag为 v5login,那么必然存在
#  v5login_testhost、v5login_relhost、v5login_prodhost 这3个key
#  且这3个key的值对应着测试环境、灰度环境、生产环境的host域名。
  module_flag: *v5login_moduleflag
#  case的描述/目的
  description:
    - 验证正常登录
    - 验证错误的账号密码能否登录成功
#  设置request_param 下的params 是params 还是data
  params_type: params
#  域名
  host: *v5login_test
  path: /passport/v5/login/username
  request_param: &req_param
    url: $url
    method: post
    headers:
      Content-Type: application/x-www-form-urlencoded
      User-Agent: *agent
    params: &loginparams
      username:
      password:
      platform: web
      clientinfo: ~
      pid: &pid CZWlTE4lVgz9
#  请求参数
  request_params:
    - <<: *req_param
    - <<: *req_param
      params:
        <<: *loginparams
        username: 13718620016
    - <<: *req_param
    - <<: *req_param
#  响应结果的处理
  response:
#    要保存的文件路径(含文件名称),当值为online时表示使用setattr和getattr来获取相关的数据。
#    当不使用在线保存响应结果时，filepath 要录入具体的json文件在response_data目录下的路径名称
#    例：0018.json 而不是/0018.json 或 response_data/0018.json 或 /response_data/0018.json
    - filepath: online
      # 要提取响应结果的哪些值，这些要使用jsonpath表达式。resp_keys 的值必须为list
      resp_keys: [ $.auth_token ]
      # 响应结果提示的字段值在保存时对应的key
      keys: [ auth_token_0015 ]
    - filepath: 0018.json
      resp_keys: [$.auth_token]
      keys: [0015_token]
#  依赖的数据
  depends_on: ~
#  断言
  assert:
#    一个case里的多重断言示例
#    jsonpath表示式的开头必须为jsonpath,不能是jsonpath.jsonpath
#    需要注意的是:当对response的json结果进行数据提取时，此时jsonpath
#    表达式里的变量为 req_json，而不是 req ; 若是获取状态码,表达式为: req.status_code
#    所有的断言必须统一使用pytest.assume(),不支持其他断言,如自带的assert()断言
    - [pytest.assume(200==req.status_code),
       "pytest.assume('奥林匹克化学学校' in (jsonpath(req_json,'$.schoolname')))"]
#    - pytest.assume('奥林匹克化学学校' in (jsonpath(req_json,'$.schoolname')))
    - pytest.assume(401==req.status_code)
    - pytest.assume(200==req.status_code)
    - pytest.assume(200==req.status_code)
# jsonschema 校验，校验的整体规则如下(一期,针对将jsonschema存放在本地的json文件中)：
# 1：当jschema_validate的值为None 或 validate的值为False时，表示不需要进行校验，返回 False
# 2：当需要校验时，会优先检测filepath的值是否有录入，若没有录入时，会返回 file_error
# 3：当filepath有录入值时：
#   3.1：会优先判断filelocation的值是mysql、redis 还是local（非mysql、redis，其他的值均被认为为local).当为mysql 或 redis时，会返回False
#   3.2：当值为local时，会进入如下的判断：
#      3.2.1：first的值是否为true，当为true时，表示是第一次运行该接口，要将返回的json数据进行转换为jsonschema并存入到json文件中。具体逻辑如下：
#           3.2.1.1:当filepath里指定的json文件不存在时，则会将返回的json数据进行转换为jsonschema，并存入到filepath里指定的json文件中，并返回None
#           3.2.1.2:当filepath里指定的json文件存在时，则会读取json文件的内容，进行如下的判断：
#               3.2.1.2.1：当内容为空时，逻辑同2.1.1，即会将response的json文件进行转换为jsonschema，并存入到filepath里指定的json文件，并返回None
#               3.2.1.2.2：当内容不为空时，会直接进行jsonschema的校验。校验通过，则返回None；校验不通过时，则会返回匹配失败的具体信息
#       3.2.2：当first的值为false时：
#           3.2.2.1：当filepath 指定的json文件不存在时，则返回 file_error
#           3.2.2.2：当filepath 指定的json文件存在时：
#               3.2.2.2.1：当内容为空时，会返回 file_null
#               3.2.2.2.2：当内容不为空时，会进行jsonschema 校验。当校验通过时，返回None；当校验未通过时，则返回具体的匹配失败的信息。

# 需要注意的是jschema_validate的值为list，其中list中的值要与assert、request_params中的list中的顺序一致。即：
#  第一组请求参数对应着第一组相关的assert断言和 jsonschema校验。但：若是对应的jsonschema不需要校验：
#    若此接口的该组(假设为当前为第二组数据,一共有四组请求数据)请求不需要进行jsonschema校验，但是该组后面的请求数据(如第三组)仍然有需要进行 jsonschema校验，
#    则当前不需要jsonschema校验的数据对应的jschema_validate 必须要有,其值不空(即不填写任何值),如下方的第三组jsonschema
#    若该组及该组后面的数据均不需要进行jsonschema校验,那么从该组开始均可以不写，或者可以写,但值为空. 如下方的第四组jsonschema(未写)
  jschema_validate:
    - &demo1
#      是否进行校验，默认值为true(含空)
      validate: true
#      要校验的jsonschema所在位置,默认值为local(loc),其值为 local、mysql、redis 该key为扩展字段,暂不启用
      filelocation: local
#      当为local时，则填写json文件在response_data目录下的文件名称;若为mysql或redis，则写该jsonschema对应的json字符串值所对应的key
#      暂不考虑非local值的情况，mysql和redis留到日后扩展。
      filepath: 0015_jschema.json
#      是否为第一次。值默认为false(含空),当不为true时，均被认为为false，其逻辑规则如下：
#      当validate为true或空时且first为true时,表示首先运行该接口，当不存在对应的json文件或有json文件，但是读取的内容为空，则表示需要存入
#      jsonscheam文件。若是本地有json文件且读取内容不为空(不进行内容校验),则不会进行任何的jsonschema内容变更,此时会直接进行校验。
#      当first为false时,若没有相对的jsonschema内容，则直接报错，不再进行校验。
      first: true
#      是否更新，默认值为false(含为空时)，表示是否需要对已保存的jsonschema的内容进行更新。该字段仅对filelocation的值为mysql或redis开放
      update: false
    - <<: *demo1
      first: false
    -


# 检查登录状态
checklogin:
  run:
  story: 登录
  module_flag: *v5login_moduleflag
  description: ["校验登录状态"]
  params_type: params
  host: *v5login_test
  path: /passport/v5/login/check
  request_param: &req_param1
    url: $url
    method: get
    headers:
      User-Agent: *agent
      Authorization: Bearer $token
    params:
      pid: *pid
  request_params:
    - <<: *req_param1
  response: ~
  depends_on:
#    online: 默认为true，当炎False时，表示要读取文件。online 使用 getattr来获取相应的值。
#    当使用在线模式时，case_id 为空，此时的depend_key表示是哪个key
#    当online为False时，depned_key的值为jsonpath表达式。
#    当type为response时，此时的case_id的值为json文件在response_data目录下的相对路径名称,如0018.json
#    当type为request时，case_id的值为具体的为所依赖的case所在的yml文件,如: test_demo.yml::login
#    目前不考虑request类型的依赖,因为在同个yml文件中可以进行数据引用。
    - online: true
      type: response
      case_id:
      depend_key: [ auth_token_0015 ]
      replace_key: [token]
  assert:
    - pytest.assume(200==req.status_code)

# 创建班级
classcreate:
  run:
  story: 创建班级
  module_flag: *v6console_moduleflag
  description: ["创建班级"]
  params_type: json
  host: *v6console_test
  path: /v1/class/create
  request_param: &req_param5
    url: $url
    method: post
    headers:
      User-Agent: *agent
      Authorization: Bearer $token
      Content-Type: application/json
    json:
      name: create_class_01
      subject_id: 1
      grade_phase_id: 2

  request_params:
    - <<: *req_param5
  response:
    - filepath: create_class_id.json
      resp_keys: [$.data.id]
      keys: [ classid_resp ]
  depends_on:
    - online: false
      type: response
      case_id: 0016.json
      depend_key: [ token_0016 ]
      replace_key: [token]
  assert:
    - pytest.assume(200==req.status_code)

# 更新班级
classupdate:
  run:
  story: 更新班级
  module_flag: *v6console_moduleflag
  description: ["更新班级"]
  params_type: json
  host: *v6console_test
  path: /v1/class/update
  request_param: &req_param6
    url: $url
    method: post
    headers:
      User-Agent: *agent
      Authorization: Bearer $token
    json:
      name: class8081
      # id 的值定义一个变量,依赖于classcreate的响应结果的data.id的值。
      id: $classid_req

  request_params:
    - <<: *req_param6
  response: ~
  depends_on:
    # 当一个接口同时有多个数据依赖时,则为二维list,否则就为一维list
    # 如下所示:当前接口依赖于token和classcreate创建时返回的班级id
    - - online: false
        type: response
        case_id: 0016.json
        # 想要获取的数据保存在哪个key下
        depend_key: [ token_0016 ]
        # 想要替换的请求参数中，哪个$变量 ,与 $后面的变量名保持一致
        replace_key: [token]
      - online: false
        type: response
        case_id: create_class_id.json
        depend_key: [ classid_resp ]
        # 值要与上面的 json下的id的值中所定义的变量一致,即$后面的值。
        replace_key: [ classid_req ]
  assert:
    - pytest.assume(200==req.status_code)